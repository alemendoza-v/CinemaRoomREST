type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/model/Seat.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat {
        // private long id;
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private boolean occupied;

        public Seat() {
        }

        public Seat(int row, int column) {
            this.row = row;
            this.column = column;
            if (row <= 4) {
                this.price = 10;
            } else {
                this.price = 8;
            }
            this.occupied = false;
        }

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public boolean isOccupied() {
            return occupied;
        }

        public void setOccupied(boolean occupied) {
            this.occupied = occupied;
        }
    }
  learner_created: true
- name: src/cinema/model/ReturnResponse.java
  visible: true
  text: |
    package cinema.model;

    public class ReturnResponse {
        private Seat returned_ticket;

        public ReturnResponse() {
        }

        public ReturnResponse(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/exception/WrongTokenException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class WrongTokenException extends RuntimeException {
        public WrongTokenException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/exception/OutOfBoundsException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class OutOfBoundsException extends RuntimeException {
        public OutOfBoundsException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/exception/PurchasedTicketException.java
  visible: true
  text: |
    package cinema.exception;

    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ResponseStatus;

    @ResponseStatus(code = HttpStatus.BAD_REQUEST)
    public class PurchasedTicketException extends RuntimeException {
        public PurchasedTicketException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/model/Cinema.java
  visible: true
  text: |
    package cinema.model;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    import java.util.*;

    public class Cinema {
        // private long id;
        private int total_rows;
        private int total_columns;
        private List<Seat> available_seats = new ArrayList<>();
        @JsonIgnore
        private Map<String, Seat> isNotReturned = new HashMap<>();

        public Cinema() {
        }

        public Cinema(int total_rows, int total_columns) {
            this.total_rows = total_rows;
            this.total_columns = total_columns;
            for (int i = 1; i <= total_rows; i++) {
                for (int j = 1; j <= total_columns; j++) {
                    available_seats.add(new Seat(i, j));
                }
            }
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }

        public List<Seat> getAvailable_seats() {
            return available_seats;
        }

        public void setAvailable_seats(List<Seat> available_seats) {
            this.available_seats = available_seats;
        }

        public Map<String, Seat> getIsNotReturned() {
            return isNotReturned;
        }

        public void setIsNotReturned(Map<String, Seat> isNotReturned) {
            this.isNotReturned = isNotReturned;
        }

        public void addIsNotReturned(String token, Seat seat) {
            this.isNotReturned.put(token, seat);
        }

        public void deleteIsNotReturned(String token) {
            this.isNotReturned.remove(token);
        }
    }
  learner_created: true
- name: src/cinema/controller/CinemaController.java
  visible: true
  text: |
    package cinema.controller;

    import cinema.exception.OutOfBoundsException;
    import cinema.exception.PurchasedTicketException;
    import cinema.exception.WrongTokenException;
    import cinema.model.*;
    import cinema.service.CinemaService;
    import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;

    import java.util.HashMap;
    import java.util.Map;
    import java.util.UUID;

    @RestController
    @RequestMapping("")
    public class CinemaController {
        @Autowired
        CinemaService cinemaService;

        @GetMapping("/seats")
        public ResponseEntity<Cinema> getSeats() {
            Cinema cinema = cinemaService.getSeats();
            return new ResponseEntity<>(cinema, HttpStatus.OK);
        }

        @PostMapping("/purchase")
        public ResponseEntity<PurchaseResponse> purchaseTicket(@RequestBody Seat seat) {
            PurchaseResponse result = cinemaService.purchaseTicket(seat);
            return new ResponseEntity<>(result, HttpStatus.OK);
        }

        @PostMapping("/return")
        public ResponseEntity<ReturnResponse> returnTicket(@RequestBody Token token) {
            return new ResponseEntity<>(cinemaService.returnTicket(token.getToken()), HttpStatus.OK);
        }

        @ExceptionHandler(OutOfBoundsException.class)
        public ResponseEntity<Map<String, String>> handleOutOfBoundsException() {
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put("error", "The number of a row or a column is out of bounds!");
            return new ResponseEntity<>(errorMap, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(PurchasedTicketException.class)
        public ResponseEntity<Map<String, String>> handlePurchaseTicketException() {
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put("error", "The ticket has been already purchased!");
            return new ResponseEntity<>(errorMap, HttpStatus.BAD_REQUEST);
        }

        @ExceptionHandler(WrongTokenException.class)
        public ResponseEntity<Map<String, String>> handleWrongTokenException() {
            Map<String, String> errorMap = new HashMap<>();
            errorMap.put("error", "Wrong token!");
            return new ResponseEntity<>(errorMap, HttpStatus.BAD_REQUEST);
        }

    }
  learner_created: true
- name: src/cinema/model/PurchaseResponse.java
  visible: true
  text: |
    package cinema.model;

    public class PurchaseResponse {
        private String token;
        private Seat ticket;

        public PurchaseResponse() {
        }

        public PurchaseResponse(String token, Seat ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/service/CinemaService.java
  visible: true
  text: |
    package cinema.service;

    import cinema.exception.OutOfBoundsException;
    import cinema.exception.PurchasedTicketException;
    import cinema.exception.WrongTokenException;
    import cinema.model.Cinema;
    import cinema.model.PurchaseResponse;
    import cinema.model.ReturnResponse;
    import cinema.model.Seat;
    import org.springframework.stereotype.Service;

    import java.util.Optional;
    import java.util.UUID;

    @Service
    public class CinemaService {
        private final Cinema cinema = new Cinema(9, 9);

        public Cinema getSeats() {
            return cinema;
        }

        public PurchaseResponse purchaseTicket(Seat seat) {
            Optional<Seat> optionalSeat = cinema.getAvailable_seats().stream()
                    .filter(s -> s.getRow() == seat.getRow())
                    .filter(s -> s.getColumn() == seat.getColumn())
                    .findFirst();

            if (optionalSeat.isPresent()) {
                Seat existingSeat = optionalSeat.get();
                if (existingSeat.isOccupied()) {
                    // Error OCCUPIED
                    throw new PurchasedTicketException("The ticket has been already purchased!");
                }
                existingSeat.setOccupied(true);
                String token = UUID.randomUUID().toString();
                cinema.addIsNotReturned(token, existingSeat);
                return new PurchaseResponse(token, existingSeat);
            }
            // Error NOT FOUND
            throw new OutOfBoundsException("The number of a row or a column is out of bounds!");
        }

        public ReturnResponse returnTicket(String token) {
            Seat seat = cinema.getIsNotReturned().getOrDefault(token, null);
            if (seat != null) {
                cinema.deleteIsNotReturned(token);
                return new ReturnResponse(seat);
            }
            throw new WrongTokenException("Wrong token!");
        }
    }
  learner_created: true
- name: src/cinema/model/Token.java
  visible: true
  text: |
    package cinema.model;

    public class Token {
        private String token;

        public Token(String token) {
            this.token = token;
        }

        public Token() {
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/model/StatsResponse.java
  visible: true
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Mon, 15 May 2023 22:00:33 UTC"
record: -1
